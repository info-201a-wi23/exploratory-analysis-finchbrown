# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load National Park location data
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv
park_locations <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
world_shape <- map_data("world")
View(state_shape)
View(park_locations)
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map()
# To make a blank theme, you can create a custom theme like so, and then add it to the bottom of your ggplot
# Try it out!
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# To make a blank theme, you can create a custom theme like so, and then add it to the bottom of your ggplot
# Try it out!
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-180, -60), ylim = c(100, -25))
# Load state shapefile
state_shape <- map_data("state")
world_shape <- map_data("world")
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-180, -60), ylim = c(100, -25))
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-180, -60), ylim = c(100, -25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "violet") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) #+ blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") + labs(title = "National Parks in America") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = world_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") + labs(title = "National Parks in America") + blank_theme
# Install maps package
install.packages("maps")
install.packages("maps")
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
View(np_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% pull(RecreationVisits)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% select(RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% group_by(RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% group_by(RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname, RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits, na.rm = TRUE))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname, na.rm = TRUE) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape, np_state_data)
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape, np_state_data, region = state_fullname )
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% sum(total_visits = sum(RecreationVisits))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape, np_state_data, region = state_full )
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, region = state_full )
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, by = c ("region" = "state_fullname" ))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, by = c ("region" = "state_fullname" ))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, by = c("region" = "state_fullname" ))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(np_state_data, by = c("region" = "state_fullname" ))
group = group,
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits')
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red") +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits')
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red") +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
library(scales)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_numbers_si()) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_numbers_si()) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
library("plotly")
library("dplyr")
library(scales)
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(np_state_data, by = c("region" = "state_fullname" ))
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_numbers_si()) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
respondent_info_df <- read.csv("C:\Users\Owner\Downloads\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
respondent_info_df <- read.csv(file = "C:\Users\Owner\Downloads\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
respondent_info_df <- read.csv(file = 'C:\Users\Owner\Downloads\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv', stringsAsFactors = FALSE)
respondent_info_df <- read.csv(file = "C:\Users\Owner\Desktop\INFO 201\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
respondent_info_df <- read.csv("C:\Users\Owner\Desktop\INFO 201\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
setwd("~/INFO 201")
respondent_info_df <- read.csv("Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Owner/Desktop/INFO 201")
setwd("C:/Users/Owner/Desktop/INFO 201/exploratory-analysis-finchbrown")
respondent_info_df <- read.csv("Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
View(respondent_info_df)
respondent_info_df <- read.csv("Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
# Count the number of unique values in the Q24 column
unique_income_brackets <- respondent_info_df %>% count(Q24..What.was.your.total.combined.household.income.in.2015.before.taxes., name = "count")
# Create the histogram
ggplot(unique_income_brackets, aes(x = Q24..What.was.your.total.combined.household.income.in.2015.before.taxes., y = count)) +
geom_histogram(stat = "identity", fill = "blue", alpha = 0.8) +
labs(title = "Histogram of Household Income in 2015",
x = "Household Income in 2015",
y = "Occurences")
library(dplyr)
library(tidyverse)
library(stringr)
# pulling all columns answering the question about where people might find information on elections
election_information_sources <- respondent_info_df %>%
select(16:29)
# simplifying column names
colnames(election_information_sources) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13")
colnames(participation_history) <- c("Please tell us if you have done any of the following activities in the past 2 years.", "2", "3", "4", "5", "6", "7", "8", "9")
compiled_eis <- data.frame(a = unlist(election_information_sources, use.names = FALSE))
compiled_eis$a <- tolower(compiled_eis$a)
unique_eis <- unique(compiled_eis)
unique_eis <- compiled_eis %>%
group_by(a) %>%
summarize(count=n())
participation_history <- respondent_info_df %>%
select(31:39)
compiled_ph <- data.frame(a = unlist(participation_history, use.names = FALSE))
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(a) %>%
summarize(count=n())
rm(unique_participation)
colnames(unique_ph) <- c("Please tell us if you have done any of the following activities in the past 2 years.", "occurances")
colnames(unique_eis) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?", "occurances")
colnames(compiled_eis) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?")
colnames(compiled_ph) <- c("Please tell us if you have done any of the following activities in the past 2 years.")
eis_survey_options <- unique_eis %>%
filter(occurances >= 20, answers != "") %>%
pull(answers)
eis_survey_options <- data.frame(eis_survey_options)
View(unique_eis)
eis_survey_options <- unique_eis %>%
filter(occurances >= 20, answers != "") %>%
pull(answers)
eis_survey_options <- unique_eis %>%
filter(occurances >= 20, answers != "") %>%
pull(answers)
eis_survey_options <- unique_eis %>%
filter(occurances >= 20)
eis_survey_options <- data.frame(eis_survey_options)
eis_survey_options <- compiled_eis %>%
group_by(information_sources) %>%
summarize(count = n())
eis_survey_options <- unique_eis %>%
filter(occurances >= 20)
eis_survey_options <- data.frame(eis_survey_options)
eis_survey_options <- compiled_eis %>%
group_by(information_sources) %>%
summarize(count = n())
making_a_difference <- data.frame(unique(respondent_info_df$Q08..Overall..how.much.of.a.difference.do.you.think.you.can.have.in.making.your.neighborhood.a.better.place.to.live.))
# pulling all columns answering the question about where people might find information on elections
election_information_sources <- respondent_info_df %>%
select(16:29)
# simplifying column names
colnames(election_information_sources) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13")
colnames(participation_history) <- c("Please tell us if you have done any of the following activities in the past 2 years.", "2", "3", "4", "5", "6", "7", "8", "9")
compiled_eis <- data.frame(a = unlist(election_information_sources, use.names = FALSE))
compiled_eis$a <- tolower(compiled_eis$a)
unique_eis <- unique(compiled_eis)
unique_eis <- compiled_eis %>%
group_by(a) %>%
summarize(count=n())
participation_history <- respondent_info_df %>%
select(31:39)
compiled_ph <- data.frame(a = unlist(participation_history, use.names = FALSE))
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(a) %>%
summarize(count=n())
colnames(unique_ph) <- c("Please tell us if you have done any of the following activities in the past 2 years.", "occurances")
colnames(unique_eis) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?", "occurances")
colnames(compiled_eis) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?")
colnames(compiled_ph) <- c("Please tell us if you have done any of the following activities in the past 2 years.")
colnames(eis_survey_options) <- c("information_sources")
colnames(eis_survey_options) <- c("information_sources")
eis_survey_options <- unique_eis %>%
filter(occurances >= 20)
eis_survey_options <- data.frame(eis_survey_options)
eis_survey_options <- compiled_eis %>%
group_by(information_sources) %>%
summarize(count = n())
group_by(information_sources) %>%
summarize(count=n())
library(dplyr)
library(tidyverse)
library(stringr)
# pulling all columns answering the question about where people might find information on elections
election_information_sources <- respondent_info_df %>%
select(16:29)
# simplifying column names
colnames(election_information_sources) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13")
colnames(participation_history) <- c("Please tell us if you have done any of the following activities in the past 2 years.", "2", "3", "4", "5", "6", "7", "8", "9")
compiled_eis <- data.frame(a = unlist(election_information_sources, use.names = FALSE))
compiled_eis$a <- tolower(compiled_eis$a)
unique_eis <- unique(compiled_eis)
unique_eis <- compiled_eis %>%
group_by(a) %>%
summarize(count=n())
participation_history <- respondent_info_df %>%
select(31:39)
compiled_ph <- data.frame(a = unlist(participation_history, use.names = FALSE))
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(a) %>%
summarize(count=n())
colnames(unique_ph) <- c("Please tell us if you have done any of the following activities in the past 2 years.", "occurances")
colnames(unique_eis) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?", "occurances")
colnames(compiled_eis) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?")
colnames(compiled_ph) <- c("Please tell us if you have done any of the following activities in the past 2 years.")
colnames(eis_survey_options) <- c("information_sources")
colnames(eis_survey_options) <- c("information_sources")
eis_survey_options <- unique_eis %>%
filter(occurances >= 20)
eis_survey_options <- data.frame(eis_survey_options)
eis_survey_options <- compiled_eis %>%
group_by(information_sources) %>%
summarize(count = n())
group_by(information_sources) %>%
summarize(count=n())
colnames(eis_survey_options) <- c("information_sources")
eis_survey_options <- unique_eis %>%
filter(occurances >= 20)
eis_survey_options <- data.frame(eis_survey_options)
eis_survey_options <- compiled_eis %>%
group_by(information_sources) %>%
summarize(count = n())
View(compiled_eis)
