y = "RecreationVisits",
color = "ParkName") +
scale_color_paletteer_c("paletteer::ggsci")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_paletteer_d("paletteer::ggsci")
install.packages("paletteer")
install.packages("paletteer")
library(paletteer)
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_paletteer_d("paletteer::ggsci")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = Paired)
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = manual)
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = Awtools)
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "Awtools")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "ggsci")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "set3")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "set2")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "Pastel2")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "Dark2")
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
geom_col(mapping = aes(x = label, y = value, color = "blue""))
df <- data.frame(
label = c("A", "B", "C", "D"),
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, color = "blue"))
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "Pastel2")
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName), na.rm = TRUE) +
labs(title = "Where People Find Quiet in the US",
caption = "Comparing visits to two American national
parks known for their low noise level",
x = "Year",
y = "RecreationVisits",
color = "ParkName") +
scale_color_brewer(palette = "Dark2")
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Then map National Park locations as points on top
geom_point(data = park_locations,
aes(x = long,
y = lat,
color = "red")) +
coord_map()
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Then map National Park locations as points on top
geom_point(data = park_locations,
aes(x = long,
y = lat,
color = "red")) +
coord_map() +
blank_theme
library("ggplot2")
library("plotly")
library("dplyr")
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
View(np_data)
np_state_data <- np_data %>%
group_by(state_fullname) %>%
summarize(state_total = sum(RecreationVisits))
View(np_state_data)
np_state_shape_data <- left_join(state_shape, np_state_data, by = c("region" = "state_fullname"))
View(np_state_shape_data)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits')
library("dplyr")
library("stringr")
library("ggplot2")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(downloads/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(~downloads/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(~/downloads/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(documents/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(~/documents/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(~documents/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(finnbrown@Finns-MacBook-Air/documents/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(Finns-MacBook-Air/documents/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(/documents/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv(documents/"2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("documents/2022-23-checkouts.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("documents/2022-23-checkouts.csv", stringsAsFactors = FALSE)
View(spl_df)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~/documents/2022-23-checkouts.csv", stringsAsFactors = FALSE)
spl_df <- spl_df %>%
mutate(spl_df, date = paste(CheckoutYear, "-", CheckoutMonth, "-", "01"))
spl_df <- spl_df %>%
mutate(spl_df, date = paste0(CheckoutYear, "-", CheckoutMonth, "-", "01"))
spl_df <- spl_df %>%
mutate(spl_df, date = paste0(CheckoutYear, "-0", CheckoutMonth, "-", "01"))
spl_df <- as.Date(date, "%Y-%m-%d")
spl_df <- as.Date(spl_df, date, "%Y-%m-%d")
?as.Date
spl_df$date <- as.Date(date, "%Y-%m-%d")
spl_df$date <- as.Date(spl_df$date, "%Y-%m-%d")
class(spl_df$date)
author_df <-
# Exercise 4: Now calculate the sum total checkouts for your author's works for *each month/date*
checkouts_per_month <- spl_df %>%
group_by(date) %>%
summarize(sum_checkouts = sum(Checkouts))
View(checkouts_per_month)
author_df <-
# Exercise 4: Now calculate the sum total checkouts for your author's works for *each month/date*
checkouts_per_month <- spl_df %>%
group_by(date) %>%
summarize(sum_checkouts = sum(Checkouts), na.rm = TRUE)
author_df <-
# Exercise 4: Now calculate the sum total checkouts for your author's works for *each month/date*
checkouts_per_month <- spl_df %>%
group_by(date) %>%
summarize(sum_checkouts = sum(Checkouts, na.rm = TRUE))
ggplot(spl_df) +
geom_line(aes(x = date, y = checkouts_per_month))
ggplot(spl_df) +
geom_line(aes(x = date, y = Checkouts))
ggplot(spl_df) +
geom_line(mapping = aes(x = date, y = Checkouts, na.rm = TRUE))
geom_line(mapping = aes(x = date, y = sum_checkouts)
ggplot(checkouts_per_month) +
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts))
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023"
x = "date"
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023",
x = "date",
y = "total checkouts")
library("scales")
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023",
x = "date",
y = "total checkouts") +
scale_y_continuous(labels = label_number_si())
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023",
x = "date",
y = "total checkouts") +
scale_y_continuous(labels = scale_cut_si())
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023",
x = "date",
y = "total checkouts") +
scale_y_continuous(labels = scale_cut())
?label_number
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023",
x = "date",
y = "total checkouts") +
scale_y_continuous(labels = label_number_cut_si())
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023",
x = "date",
y = "total checkouts") +
scale_y_continuous(labels = label_number(scale_cut = cut_si()))
ggplot(checkouts_per_month) +
geom_line(mapping = aes(x = date, y = sum_checkouts)) +
labs(title = "Library Checkouts Each Month 2022-2023",
x = "date",
y = "total checkouts") +
scale_y_continuous(labels = label_number_si())
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_accessibilty_stacked_bar.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
setwd("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
View(compiled_eis)
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
View(eis_survey_options)
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
View(compiled_eis)
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
View(unique_eis)
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
rlang::last_error()
eis_survey_options <- unique_eis %>%
filter(occurrences >= 20)
View(eis_survey_options)
colnames(eis_survey_options) <- c("information_sources")
colnames(eis_survey_options) <- c("information_sources", "occurrences")
View(compiled_eis)
colnames(compiled_eis) <- c("information_sources")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
View(unique_ph)
unique_eis <- unique(compiled_eis)
colnames(unique_eis) <- c("activities")
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$`Please tell us if you have done any of the following activities in the past 2 years.`) %>%
summarize(count=n())
View(compiled_ph)
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
# simplifying column names
colnames(election_information_sources) <- c("If you wanted to find information about elections, issues, and candidates, which of the following would you most likely use?", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13")
colnames(participation_history) <- c("Please tell us if you have done any of the following activities in the past 2 years.", "2", "3", "4", "5", "6", "7", "8", "9")
colnames(unique_eis) <- c("activities", "occurrences")
colnames(eis_survey_options) <- c("information_sources", "occurrences")
colnames(compiled_eis) <- c("information_sources")
colnames(eis_survey_options) <- c("information_sources", "occurrences")
colnames(compiled_eis) <- c("information_sources")
colnames(compiled_ph) <- c("activities")
colnames(unique_ph) <- c("activities", "occurrences")
colnames(making_a_difference) <- c("Overall, how much of a difference do you think you can have in making your neighborhood a better place to live?", "Occurrences")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R")
View(unique_ph)
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$`Please tell us if you have done any of the following activities in the past 2 years.`) %>%
summarize(count=n())
colnames(unique_ph) <- c("activities", "occurrences")
View(unique_ph)
unique_ph <- unique(compiled_ph)
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$activities) %>%
summarize(count=n())
colnames(unique_ph) <- c("activities", "occurrences")
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R", echo=TRUE)
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences)) %>%
pull(activities)
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences), na.rm = TRUE) %>%
pull(activities)
View(top_participation)
unique_ph <- unique(compiled_ph, na.rm = TRUE)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$activities) %>%
summarize(count=n())
colnames(unique_ph) <- c("activities", "occurrences")
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences), na.rm = TRUE) %>%
pull(activities)
View(top_participation)
unique_ph <- unique(compiled_ph, na.rm = TRUE)
compiled_ph <- data.frame(a = unlist(participation_history, use.names = FALSE), na.rm = TRUE)
colnames(compiled_ph) <- c("activities")
compiled_ph <- data.frame(a = unlist(participation_history, use.names = FALSE, na.rm = TRUE))
compiled_ph <- data.frame(a = unlist(participation_history, use.names = FALSE), na.rm = TRUE)
View(compiled_ph)
compiled_ph <- data.frame(a = unlist(participation_history, use.names = FALSE))
colnames(compiled_ph) <- c("activities")
compiled_ph <- data.frame(activities = unlist(participation_history, use.names = FALSE))
View(compiled_ph)
compiled_ph <- compiled_ph(na.rm = T)
unique_ph <- unique(compiled_ph, na.rm = T)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$activities, na.rm = TRUE) %>%
summarize(count=n())
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$activities) %>%
summarize(count=n())
colnames(unique_ph) <- c("activities", "occurrences")
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences), na.rm = TRUE) %>%
pull(activities)
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences, na.rm = TRUE), na.rm = TRUE) %>%
pull(activities)
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences, na.rm = TRUE)) %>%
pull(activities)
?na.rm
??na.rm
unique_ph <- unique(compiled_ph, na.rm = TRUE)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$activities) %>%
summarize(count=n())
colnames(unique_ph) <- c("activities", "occurrences")
na.omit(unique_ph$activities)
unique_ph <- na.omit(unique_ph$activities)
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$activities) %>%
summarize(count=n())
colnames(unique_ph) <- c("activities", "occurrences")
unique_ph$activities <- na.omit(unique_ph$activities)
unique_ph <- unique(compiled_ph)
unique_ph <- compiled_ph %>%
group_by(compiled_ph$activities) %>%
summarize(count=n())
colnames(unique_ph) <- c("activities", "occurrences")
unique_ph$activities <- na.omit(unique_ph$activities)
?na.omit
na.omit(unique_ph)
unique_ph <- na.omit(unique_ph)
# creating unique_eis
unique_eis <- unique(compiled_eis)
# adding column with number of each unique answer
unique_eis <- compiled_eis %>%
group_by(information_sources) %>%
summarize(count=n())
colnames(unique_eis) <- c("activities", "occurrences")
unique_eis <- na.omit(unique_eis)
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences)) %>%
pull(activities)
lowest_participation <- unique_ph %>%
filter(occurrences == min(occurrences)) %>%
pull(activities)
top_ptn_number <- unique_ph %>%
filter(occurrences == max(occurrences))
top_ptn_number <- unique_ph %>%
filter(occurrences == max(occurrences))
top_ptn_number <- unique_ph %>%
filter(occurrences == max(occurrences)) %>%
pull(occurrences)
top_participation <- unique_ph %>%
filter(occurrences == max(occurrences)) %>%
pull(activities)
top_ptn_number <- unique_ph %>%
filter(occurrences == max(occurrences)) %>%
pull(occurrences)
lowest_participation <- unique_ph %>%
filter(occurrences == min(occurrences)) %>%
pull(activities)
lowest_ptn_number <- unique_ph %>%
filter(occurrences == min(occurrences)) %>%
pull(occurrences)
source("~/Documents/Winter2023/Info201/exploratory-analysis-finchbrown/election_info.R", echo=TRUE)
install.packages("nat")
library(nat)
install.packages("XQuartz")
