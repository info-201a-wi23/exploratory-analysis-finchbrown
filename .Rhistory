View(np_data)
# Exercise 1: You're going to compare the recreation visits over time for at least 2 National Parks
# Explore np_data and pick at least 2 NPs that would be interesting to compare
# Filter the data for those 2 or more NPs
my_parks <- np_data %>% filter(ParkName %in% c("Arches NP", "Badlands NP"))
View(my_parks)
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = ParkName, y = RecreationVisits, color = ParkName))
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName))
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)) + options(scipen = 999)
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)+ options(scipen = 999))
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)) options(scipen = 999)
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)) options(scipen = 999)
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)) options(scipen = 999)
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)) options(scipen = 999)
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)))
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName))
options(scipen = 999)
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
# options(scipen = 999)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName))
options(scipen = 999)
# Exercise 3: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# Additionally, choose a new color palette
# Possible color palettes: https://r-graph-gallery.com/38-rcolorbrewers-palettes.html
# Also, add a significant, attention-grabbing title and legible x, y axes labels
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)+ scale_color_brewer(palette = "Accent") +
labs(title = "Visits Over Time!!!"))
# Exercise 3: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# Additionally, choose a new color palette
# Possible color palettes: https://r-graph-gallery.com/38-rcolorbrewers-palettes.html
# Also, add a significant, attention-grabbing title and legible x, y axes labels
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)+ scale_color_brewer(palette = "Accent") +
labs(title = "Visits Over Time!!!",
x = "Year",
y = "Visits"))
# Exercise 4: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# Additionally, choose a new color palette
# Also, add a significant, attention-grabbing title and legible x, y axes labels
# Finally, format the x tick labels so that they appear every 5 years, and change the y axis to abbreviated thousands (k) and millions (m)
ggplot(data = my_parks) +
geom_line(mapping = aes(x = Year, y = RecreationVisits, color = ParkName)+ scale_color_brewer(palette = "Accent") +
labs(title = "Visits Over Time!!!",
x = "Year",
y = "Visits")) +
scale_x_continuous(breaks = seq(1980, 2020, 5))
# Install maps package
install.packages("maps")
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load libraries
library(ggplot2)
library(plotly)
library(dplyr)
library(maps)
library(plotlyr)
# Load National Park location data
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv
park_locations <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv", stringsAsFactors = FALSE)
# Load libraries
library(ggplot2)
library(plotly)
library(dplyr)
library(maps)
# Load National Park location data
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv
park_locations <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv", stringsAsFactors = FALSE)
install.packages(plotly)
library(plotly)
library(plotly)
# Install maps package
install.packages("maps")
install.packages("maps")
# Load libraries
library(ggplot2)
library(plotly)
library(dplyr)
library(maps)
library(plotly)
library("plotly")
library("plotly")
library("plotly")
library("plotly")
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load National Park location data
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv
park_locations <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load National Park location data
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv
park_locations <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
world_shape <- map_data("world")
View(state_shape)
View(park_locations)
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map()
# To make a blank theme, you can create a custom theme like so, and then add it to the bottom of your ggplot
# Try it out!
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# To make a blank theme, you can create a custom theme like so, and then add it to the bottom of your ggplot
# Try it out!
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-180, -60), ylim = c(100, -25))
# Load state shapefile
state_shape <- map_data("state")
world_shape <- map_data("world")
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-180, -60), ylim = c(100, -25))
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-180, -60), ylim = c(100, -25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "red") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "violet") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) #+ blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") + labs(title = "National Parks in America") +
coord_map(xlim = c(-125, -60), ylim = c(50, 25)) + blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = world_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
geom_point(data = park_locations, aes(x = long,
y = lat),
color = "orange") + labs(title = "National Parks in America") + blank_theme
# Install maps package
install.packages("maps")
install.packages("maps")
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
View(np_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% pull(RecreationVisits)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% select(RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% group_by(RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% group_by(RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname, RecreationVisits)
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
View(np_state_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits, na.rm = TRUE))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname, na.rm = TRUE) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape, np_state_data)
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape, np_state_data, region = state_fullname )
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% sum(total_visits = sum(RecreationVisits))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape, np_state_data, region = state_full )
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, region = state_full )
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, by = c ("region" = "state_fullname" ))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, by = c ("region" = "state_fullname" ))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(state_shape, np_state_data, by = c("region" = "state_fullname" ))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(np_state_data, by = c("region" = "state_fullname" ))
group = group,
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits')
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red") +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits')
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red") +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
library(scales)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_numbers_si()) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_numbers_si()) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
library("plotly")
library("dplyr")
library(scales)
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>% group_by(state_fullname) %>% summarize(total_visits = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>% left_join(np_state_data, by = c("region" = "state_fullname" ))
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_numbers_si()) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
scale_fill_continuous(low = "yellow",
high = "red",) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits') + blank_theme
respondent_info_df <- read.csv("C:\Users\Owner\Downloads\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
respondent_info_df <- read.csv(file = "C:\Users\Owner\Downloads\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
respondent_info_df <- read.csv(file = 'C:\Users\Owner\Downloads\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv', stringsAsFactors = FALSE)
respondent_info_df <- read.csv(file = "C:\Users\Owner\Desktop\INFO 201\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
respondent_info_df <- read.csv("C:\Users\Owner\Desktop\INFO 201\Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
setwd("~/INFO 201")
respondent_info_df <- read.csv("Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
setwd("C:/Users/Owner/Desktop/INFO 201")
setwd("C:/Users/Owner/Desktop/INFO 201/exploratory-analysis-finchbrown")
respondent_info_df <- read.csv("Seattle_Votes_Survey_Data_from_5_224_immigrant_and_refugee_residents_of_Seattle_King_County.csv", stringsAsFactors = FALSE)
View(respondent_info_df)
